{"version":3,"sources":["Services/shortenService.js","Components/shortener.js","Services/authService.js","Components/signup.js","App.js","serviceWorker.js","index.js"],"names":["ShortenService","_this","this","Object","classCallCheck","addUrl","destination","shorten","post","then","response","data","getUrl","id","get","concat","axios","create","baseURL","process","withCredentials","Shortener","props","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","preventDefault","_event$target","target","name","value","setState","defineProperty","handleSubmit","state","shortenService","url","_id","shortUrl","catch","error","console","log","react_default","a","createElement","onSubmit","type","onChange","placeholder","Component","AuthService","signup","username","password","authorise","login","userLoggedIn","Signup","_this$state","authService","setCurrentUser","App","user","currentUser","getCurrentUser","_this2","window","location","href","_this3","className","react_router","exact","path","component","render","_ref","match","redirectToDestination","params","to","Boolean","hostname","ReactDOM","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b71ddfd1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nclass ShortenService {\r\n  constructor() {\r\n    this.shorten = axios.create({\r\n      baseURL: `${process.env.REACT_APP_API_URL}/url`,\r\n      withCredentials: true\r\n    })\r\n  }\r\n\r\n  addUrl = (destination) => {\r\n    return this.shorten.post('/add', {destination})\r\n    .then(response => response.data)\r\n  }\r\n\r\n  getUrl = (id) => {\r\n    return this.shorten.get(`/findbyid/${id}`)\r\n    .then(response => response.data)\r\n  }\r\n}\r\n\r\nexport default ShortenService;","import React, { Component } from 'react';\r\nimport ShortenService from '../Services/shortenService';\r\n\r\nclass Shortener extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      destination: '',\r\n      shortUrl: ''\r\n    };\r\n    this.shortenService = new ShortenService();\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    // prevent page refresh\r\n    event.preventDefault();\r\n    \r\n    const {name, value} = event.target;\r\n    this.setState({[name]: value});\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    // prevent page refresh\r\n    event.preventDefault();\r\n\r\n    // get shortPath from api and store destination url in database\r\n    const destination = this.state.destination;    \r\n    this.shortenService.addUrl(destination)\r\n    .then(response => {\r\n      const url = `${process.env.REACT_APP_API_URL}/${response._id}`;\r\n      this.setState({shortUrl: url})\r\n    })\r\n    .catch(error => console.log(error))\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <article>\r\n          Use this app to create a short url\r\n        </article>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>Destination</label>\r\n          <input name=\"destination\" type=\"text\" onChange={this.handleChange} value={this.state.destination} placeholder=\"type or paste your url here\" />\r\n          <input type=\"submit\" value=\"Get short url\" />\r\n        </form>\r\n        <p>The following short url was created for you</p>\r\n        <p>{this.state.shortUrl}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Shortener;","import axios from 'axios';\r\n\r\nclass AuthService {\r\n  constructor() {\r\n    this.authorise = axios.create({\r\n      baseURL: process.env.REACT_APP_API_URL,\r\n      withCredentials: true\r\n    })\r\n  }\r\n\r\n  signup = (username, password) => {\r\n    return this.authorise.post('/signup', {username, password})\r\n    .then(response => response.data)\r\n  }\r\n\r\n  login = (username, password) => {\r\n    return this.authorise.post('/login', {username, password})\r\n    .then(response => response.data)\r\n  }\r\n\r\n  userLoggedIn = () => {\r\n    return this.authorise.get('/userloggedin')\r\n    .then(response => response.data)\r\n  }\r\n}\r\n\r\nexport default AuthService;","import React, { Component } from 'react';\r\n/* import { Redirect } from 'react-router-dom'; */\r\nimport AuthService from '../Services/authService';\r\n\r\nclass Signup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        'username': '',\r\n        'password': ''\r\n    };\r\n    this.authService = new AuthService();\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    // maintain input values in state\r\n    event.preventDefault();\r\n    const {name, value} = event.target;\r\n    this.setState({[name]: value});\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const {username, password} = this.state;\r\n    \r\n    this.authService.signup(username, password)\r\n    .then(response => {\r\n      // clear username and password in the form\r\n      this.setState({username: '', password: ''});\r\n      \r\n      // lifting state up: call setCurrentUser function that was passed through props\r\n      // and store the currentUser in the state in App.js\r\n      this.props.setCurrentUser(response);;\r\n    })\r\n    .catch(error => console.log('error: ' + error))        \r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>Username:</label>\r\n          <input name=\"username\" type=\"text\" placeholder=\"username\" value={this.state.username} onChange={this.handleChange} />\r\n          <label>Password:</label>\r\n          <input name=\"password\" type=\"password\" placeholder=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n          <input type=\"submit\" value=\"Signup\" />\r\n        </form>\r\n        <p>{this.state.error}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Signup;","import React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\n\nimport Shortener from './Components/shortener';\nimport Signup from './Components/signup';\n\nimport ShortenService from './Services/shortenService';\nimport AuthService from './Services/authService';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {currentUser: null};\n    this.authService = new AuthService();\n    this.getCurrentUser();\n  }\n\n  // check current user in session (only) after page refresh and store in state\n  getCurrentUser() {\n    if (!this.state.currentUser) {\n      /* console.log('Auth service checking session...'); */\n      this.authService.userLoggedIn()\n      .then(response => {\n        /* console.log('Current user in session: ');\n        console.log(response); */\n        this.setState({currentUser: response.currentUser});\n      })\n    }\n  }\n\n  // function setCurrentUser is passed through props to Signup and Login components and will be called from within those components\n  setCurrentUser = (user) => {\n    this.setState({currentUser: user});\n  }\n\n  redirectToDestination(id) {\n    // get destination url\n    const shortenService = new ShortenService();\n    shortenService.getUrl(id)\n    .then(response => {\n      if ( response === null) {\n        return;\n      } else {\n        // redirect to destination url\n        const destination = response.destination;\n        window.location.href = destination;\n      }\n    })\n    .catch(error => console.log(error));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={Shortener} />\n          <Route exact path='/signup'>\n            <Signup setCurrentUser={this.setCurrentUser} />\n          </Route>\n          <Route exact path=\"/:id\" render={(({match}) => {\n            this.redirectToDestination(match.params.id); // async function, so next statement will execute first!\n            return(<Redirect to=\"/\" />);\n          })} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}